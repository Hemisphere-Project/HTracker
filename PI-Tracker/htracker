#!/usr/bin/env python3

from DMXEnttecPro.utils import show_port_details
from m5_receive import M5Interface
from dmx32 import Dmx32
from scene import SceneBook
from webserver import Webserver
from time import sleep
import sys, signal, os
from watchdog.observers import Observer
from watchdog.events import PatternMatchingEventHandler
import eventlet
import socketio

#
# START
#

# HELLO
print("\n.:: HTRACKER ::.\n")

# AVAILABLE ports
print("Available serial ports:")
show_port_details()
print()

# OPEN M5
M5usb = M5Interface('01DB750E')
M5usb.logEvents = False
M5usb.start()

# OPEN DMX32
DMX32 = Dmx32('0001', 150, 'sceneselect', 2.55)
DMX32.start()


# OPEN SCENARIO
scenario = '/data/htracker-scenario.json'
if len(sys.argv) > 1:
    scenario = os.path.join('/data', 'htracker-'+sys.argv[1]+'.json')
Book = SceneBook(scenario)
print("Scenario loaded: ")
print(Book.export())
print()


#
# INTERFACE
#
web = Webserver(Book, M5usb, DMX32)
web.start()

#
# EVENTS
#

# SCENE Select
@DMX32.on("sceneselect")
def ss(ev, sceneN):
    M5usb.pause()
    DMX32.clear()
    Book.selectscene(sceneN)
    M5usb.play()


# MEASURE process
@M5usb.on('measure')
def ms(ev, data):
    result = Book.process(data['sensor'], data['value'])
    filtered = {}
    for m in result:
        if m[0] in filtered:
            filtered[m[0]] = max(m[1], filtered[m[0]])
        else:
            filtered[m[0]] = m[1]

    for ch, val in filtered.items():
        DMX32.set(ch, val)



#WATCH scenario RELOAD
def scenarioreload(e):
    if e.src_path.endswith("scenario.json"):
        # print('reload', e)
        Book.load()
handler = PatternMatchingEventHandler("*/scenario.json", None, False, True)
handler.on_created = scenarioreload
observer = Observer()
observer.schedule(handler, os.path.dirname(os.path.realpath(scenario)) )
observer.start()



def signal_handler(sig, frame):
    print('You pressed Ctrl+C!')
    M5usb.quit()
    DMX32.quit()
    web.quit()
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)
signal.pause()